<!--
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
-->
<link rel="import" href="../../bower_components/polymer/polymer.html">
<link rel="import" href="../../bower_components/app-storage/app-localstorage/app-localstorage-document.html">
<link rel="import" href="../../bower_components/paper-input/paper-input.html">
<link rel="import" href="../../bower_components/iron-ajax/iron-ajax.html">
<link rel="import" href="../../bower_components/paper-toggle-button/paper-toggle-button.html">
<link rel="import" href="../../bower_components/paper-dialog/paper-dialog.html">
<!--
<link rel="import" href="../../bower_components/iron-icon/iron-icon.html">
<link rel="import" href="../../bower_components/iron-icons/iron-icons.html">-->



<dom-module id="smag-visualisation">
  <template>
    <style include="shared-styles"></style>
    <style>
      :host {
        display: block;
      }
      table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
      }

      td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
        width: 30%;
      }

      tr:nth-child(even) {
        background-color: #dddddd;
      }
    </style>

    <app-localstorage-document  key="endpoint" data="{{endpoint}}">    </app-localstorage-document>
    <app-localstorage-document key="dataset" data="{{dataset}}">    </app-localstorage-document>
    <app-localstorage-document key="graphe" data="{{graphe}}">    </app-localstorage-document>
    <app-localstorage-document key="nb" data="{{nb}}">    </app-localstorage-document>

    <iron-ajax
      auto
      id="ajaxGet"
      url="{{url}}"
      params="{{options}}"
      handle-as="json"
      on-response="handleResponse"
      on-error="ajaxError"
    debounce-duration="300"></iron-ajax>


    <iron-ajax
    id="ajaxChangement"
    url="{{url}}"
    body="{{optionsModif}}"
    method="POST"
    handle-as="document"
    content-type="application/x-www-form-urlencoded"
    on-response="handleResponseChange"
    on-error="ajaxErrorChange">
  </iron-ajax>


<paper-input label="Requête" value="{{query}}"></paper-input>
  <paper-input label="nombre d'eléments à afficher" value="{{limite}}"></paper-input>

      <paper-toggle-button checked="{{prefixes}}">Avec Prefixes</paper-toggle-button>
      <paper-toggle-button checked="{{modifications}}">Avec Modifications</paper-toggle-button>
    <table>
			<!-- voir aussi https://saulis.github.io/iron-data-table/demo/columns.html -->
			<tr>
				<template is="dom-repeat" items="{{head}}">
					<th>{{item}}</th>
				</template>
			</tr>
			<template is="dom-repeat" items="{{results}}">
        <tr>
          <td>
            <div hidden$={{prefixes}}>{{afficheLocalName(item.Sujet.value)}}</div>
            <div hidden$={{!prefixes}}><h6>{{item.Sujet.value}}</h6></div></td>
          <td>
            <div hidden$={{prefixes}}>{{afficheLocalName(item.Predicat.value)}}</div>
            <div hidden$={{!prefixes}}><h6>{{item.Predicat.value}}</h6></div>
          </td>
          <td>
            <div hidden$={{prefixes}}>{{afficheLocalName(item.Objet.value)}}</div>
            <div hidden$={{!prefixes}}><h6>{{item.Objet.value}}</h6></div>
          </td>
          <td hidden$={{!modifications}}>
          <paper-button item="{{item}}" raised on-tap="_modif">Modif</paper-button>
          <paper-button item="{{item}}" raised on-tap="_supp">X</paper-button>
        </td>
				</tr>
			</template>
    </table>

    <paper-dialog id="dialog">
      <h2>Modification</h2>
      <paper-input label="Sujet" value="{{sujetTemp.localName}}"></paper-input>
      <paper-input label="propriete" value="{{proprieteTemp.localName}}"></paper-input>
      <paper-input label="Objet" value="{{objetTemp.localName}}"></paper-input>
      <paper-toggle-button id="literal">Literal</paper-toggle-button>
      <paper-button item="{{item}}" raised on-tap="_sendChangement">OK</paper-button>
    </paper-dialog>

    <paper-dialog id="suppDialog">
      <h2>Suppression</h2>
      <p>Confirmez vous la suppression du triplet suivant : </p>
      <p>{{sujetTemp.localName}}</p>
      <p>{{proprieteTemp.localName}}</p>
      <p>{{objetTemp.localName}}</p>
    <!--  <paper-toggle-button id="literal">Literal</paper-toggle-button>-->
      <paper-button item="{{item}}" raised on-tap="_suppTriplet">OK</paper-button>
    </paper-dialog>
  </template>

  <script>
    (function() {
      'use strict';

      Polymer({
        is: 'smag-visualisation',

        properties: {
          endpoint : {
            type: String,
            notify: true
          },
          dataset:{
            type: String,
            notify: true
          },
          graphe: {
            type: String,
            notify: true
          },
          action : {
            value: 'query',
            notify: true
          },
          query : {
            notify: true
          },
          limite : {
            value: 100,
            notify: true
          },
          output : {
            value: 'json',
            notify: true
          },
          url: {
           computed: 'computedUrl(endpoint,dataset,action)'
          },
          options: {
            computed: 'computedOptions(graphe,limite,output)'
          },
          head: {
            type: Array,
            notify: true
          },
          results:{
            type: Array,
            notify: true
          },
          nb:{
            type: Number,
            notify: true,
            observer: '_nbChanged'
          },
          prefixes:{
            type: Boolean,
            notify: true,
          },
          sujetTemp:{
            type:String,
          },
          proprieteTemp:{
            type: String,
          },
          objetTemp:{
            type: String
          }
        },
        computedUrl: function(endpoint,dataset,action){
          return [endpoint,dataset,action].join('/');
        },
        computedOptions: function(graphe,limite,output){
          if (graphe != ""){
            this.query = 'SELECT * FROM '+graphe+' WHERE {?Sujet ?Predicat ?Objet}';
          }else{
            this.query = 'SELECT * WHERE {?Sujet ?Predicat ?Objet}'
          }
          var queryLimite=this.query+" LIMIT "+limite;
          return{query: queryLimite, output: output};
        },
        /* SUPPRESSION D'UN TRIPLET*/
        _supp(e,detail){
          console.log(e.model.item);
          var item = e.model.item;

          this.sujetTemp = this.splitDecompose(item.Sujet);
          this.proprieteTemp = this.splitDecompose(item.Predicat);
          this.objetTemp = this.splitDecompose(item.Objet);
          this.$.suppDialog.toggle();
        //  this.suppTriplet();
        },
        _suppTriplet: function(){
          var oldObjetType = this.objetTemp.type;
          console.log(oldObjetType);
          console.log(this.sujetTemp);
          console.log(this.proprieteTemp);
          console.log(this.objetTemp);
          var oldSujetUri = this.sujetTemp.uri;
          var oldPropUri = this.proprieteTemp.uri;
          var oldObjUri = this.objetTemp.uri;
          var query = 'WITH '+this.graphe+'\n';
          query += 'DELETE \n';
          if (oldObjetType !="literal"){
            query += '{ <'+oldSujetUri+'> <'+oldPropUri+'> <'+oldObjUri+'> }\n';
          }else{
            query += '{ <'+oldSujetUri+'> <'+oldPropUri+'> "'+oldObjUri+'" }\n';
          }
        /*  query += 'INSERT \n';
          query += '{ <'+newSujUri+'> <'+newPropUri+'> <'+newObjUri+'> }\n';*/
          query += 'WHERE\n';
          if (oldObjetType !="literal"){
            query += '{ <'+oldSujetUri+'> <'+oldPropUri+'> <'+oldObjUri+'> }\n';
          }else{
            query += '{ <'+oldSujetUri+'> <'+oldPropUri+'> "'+oldObjUri+'" }\n';
          }
          this.$.ajaxChangement.url= this.computedUrl(this.endpoint,this.dataset,'update');
          this.query = query;
          this.optionsModif = {};
          this.optionsModif.update=query;
          console.log(this.query);
        //  console.log(this.sujet);
        //	console.log(this.propriete);
        //  console.log(this.graphe);
        //	console.log(this.objet);
        //  console.log(this.$.ajaxChangement.url);
          console.log(this.$.ajaxChangement);
          this.$.ajaxChangement.generateRequest();
          this.$.suppDialog.toggle();

        },
/* MODIFICATION D'UN TRIPLET */
        _modif(e,detail){
          console.log(e.model.item);
          var item = e.model.item;

          this.sujetTemp = this.splitDecompose(item.Sujet);
          this.proprieteTemp = this.splitDecompose(item.Predicat);
          this.objetTemp = this.splitDecompose(item.Objet);
          this.$.dialog.toggle();
        },
        _sendChangement: function(){
        //  console.log(this.sujetTemp);
        //  console.log(this.proprieteTemp);
          console.log(this.objetTemp.type);

          var oldSujetUri = this.sujetTemp.uri;
          var oldPropUri = this.proprieteTemp.uri;
          var oldObjUri = this.objetTemp.uri;
          var newSujUri = this.sujetTemp.prefix+this.sujetTemp.localName;
          var newPropUri = this.proprieteTemp.prefix+this.proprieteTemp.localName;
          var newObjUri = this.objetTemp.prefix+this.objetTemp.localName;
          var oldObjetType = this.objetTemp.type;
          var newObjLiteral =  this.$.literal.checked;

// MODIFICATION D'UN TRIPLET avec graphe
          var query = 'WITH '+this.graphe+'\n';
          query += 'DELETE \n';
          if (oldObjetType == "uri"){
            query += '{ <'+oldSujetUri+'> <'+oldPropUri+'> <'+oldObjUri+'> }\n';
          }else{
            query += '{ <'+oldSujetUri+'> <'+oldPropUri+'> "'+oldObjUri+'" }\n';
          }
          query += 'INSERT \n';
          if (!newObjLiteral){
            query += '{ <'+newSujUri+'> <'+newPropUri+'> <'+newObjUri+'> }\n';
          }else{
            query += '{ <'+newSujUri+'> <'+newPropUri+'> "'+newObjUri+'" }\n';
          }
          query += 'WHERE\n';
          if (oldObjetType == "uri"){
            query += '{ <'+oldSujetUri+'> <'+oldPropUri+'> <'+oldObjUri+'> }\n';
          }
          else{
            query += '{ <'+oldSujetUri+'> <'+oldPropUri+'> "'+oldObjUri+'" }\n';
          }


          this.$.ajaxChangement.url= this.computedUrl(this.endpoint,this.dataset,'update');

          this.query = query;
          this.optionsModif = {};
          this.optionsModif.update=query;
        //  console.log(this.query);
      //    console.log(this.sujet);
  			//	console.log(this.propriete);
        //  console.log(this.graphe);
  			//	console.log(this.objet);
        //  console.log(this.$.ajaxChangement.url);
      //    console.log(this.$.ajaxChangement);
        	this.$.ajaxChangement.generateRequest();
          this.$.dialog.toggle();
        },
        /* Recuperation de la reponse */
        handleResponse:function(data){
          console.log(data.detail.response);
          this.head=data.detail.response.head.vars;
          this.results=data.detail.response.results.bindings;
          console.log(this.head);
          console.log(this.results);
          this.nb = 0;
        },

        /**
        * en cas d'erreur de la requete
        */
        ajaxError : function(data){
          console.log(data);
          //   this.result =  data.detail.error.message+"\n"+this.$.ajaxupdate.url;
        },
        _nbChanged : function(){
          this.$.ajaxGet.generateRequest();

        },


        splitDecompose(binding){
          var binding = binding;
          var result = {};
          var type = binding.type;
          var prefix = binding.value.split("#")[0];
          var localName =  binding.value.split("#")[1];
          if (localName == undefined){
            prefix = binding.value.substring(0, binding.value.lastIndexOf("/") + 1);
            localName = binding.value.substring(binding.value.lastIndexOf("/") + 1, binding.value.length);
          }else{
            prefix = prefix+"#";
          }

          result.uri = binding.value;
          result.type = type;
          result.prefix= prefix;
          result.localName = localName;
          console.log(result);
          return result;
        },
        afficheLocalName: function(value){
          var valSplit = value.split("#")[1];
      //    console.log(valSplit);
        /*  if (valSplit == undefined){
            valSplit = '" '+value.split('/').pop()+' "'; // returns 456
          }*/
          if (valSplit == undefined){
          //  prefix = binding.value.substring(0, binding.value.lastIndexOf("/") + 1);
            valSplit = value.substring(value.lastIndexOf("/") + 1, value.length);
          }
          return valSplit;
        },
        /**
        * recupere et parse la reponse du serveur
        */
        handleResponseChange: function(data){
          var html=data.detail.response.getElementsByTagName("html")[0];
          var body=html.getElementsByTagName("body")[0];
          var resultat=body.getElementsByTagName("h1")[0].firstChild.nodeValue;
          this.result=resultat;
          console.log(this.result);
          this.nb=this.nb+1;
//          console.log(this.nb);
        },

        /**
        * en cas d'erreur de la requete
        */
        ajaxErrorChange : function(data){
             console.log(data.detail.error.message);
             console.log(this.$.ajaxChangement.url);
              console.log(this.$.ajaxChangement.options);
        }
      });
    })();
  </script>

</dom-module>
